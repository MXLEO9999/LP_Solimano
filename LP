using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using System.Collections;


namespace Solucion01
{
    internal class Program
    {
        private static int len;

        List<Program> datosemp = new List<Program>();
        static string Main(string[] args)
        {
            string AAATTGGATCAAA;
            string TAACCGGUUTACC; 

            //generemos combinaciones con las bases para la mutacíon

            Random r = new Random(DateTime.Now.Millisecond);

            sbyte[] buffer = new sbyte[len];
            char[] res = new char[len];
            for (int i = 0; i < len; i++)
            {
                int s = r.Next(1, 4);
                switch (s)
                {
                    case 1:
                        res[i] = Convert.ToChar(r.Next(49, 57));
                        break;
                    case 2:
                        res[i] = Convert.ToChar(r.Next(65, 90));
                        break;
                    default:
                        res[i] = Convert.ToChar(r.Next(97, 122));
                        break;
                }
            }

            return new String(res);
            }
        //método para generar seres alteatorios
        public static string GenerarSeresAleatoria(int maxLenght)
        {
            try
            {
                var obj = new Random();
                const string allowedChars = "AAATTGGATCAAA";
                var longitud = allowedChars.Length;
                var res = "";

                for (int i = 0; i < maxLenght; i++)
                {
                    res += allowedChars[obj.Next(longitud)];
                }
                return res;

            }
            catch (Exception)
            {
                throw new Exception("No se puede generar una cadena aleatoria");
            }
        }
        //generamos seres con base U
        public static string GenerarSeresAleatoria02(int maxLenght)
        {
            try
            {
                var obj = new Random();
                const string allowedChars = "TAACCGGUUTACC";
                var longitud = allowedChars.Length;
                var res = "";

                for (int i = 0; i < maxLenght; i++)
                {
                    res += allowedChars[obj.Next(longitud)];
                }
                return res;

            }
            catch (Exception)
            {
                throw new Exception("No se puede generar una cadena aleatoria");
            }
        }
        ///guardamos el resultado en un txt
        XmlSerializer seralizar = new XmlSerializer(typeof(List<Program>));
        FileStream lector = File.OpenRead("SeresUnicelulares.txt");

        //Program = (List<Program>) seralizar.Deserialize(lector);
        //dgempleado.DataSource = datosemp;
    }
}
